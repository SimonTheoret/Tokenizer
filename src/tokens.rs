use std::fmt;
use std::fmt::Display;

/// Enum to wrap around the possible values generated by the
/// tokenizer.
enum Tokens<'a> {
    Regular(i32),
    SpecialToken(&'a str),
}

impl<'a> Tokens<'a> {
    /// Instantiate a new regular token with value `value`
    fn new_regular(value: i32) -> crate::tokens::Tokens<'a> {
        Tokens::Regular(value)
    }
    /// Instantiate a new special token with value `value`
    fn new_special(value: &'a str) -> crate::tokens::Tokens<'a> {
        Tokens::SpecialToken(value)
    }
    /// Returns the value as a string.
    fn string(&self) -> String {
        match self {
            Tokens::Regular(int) => int.to_string(),
            Tokens::SpecialToken(special) => special.to_string(),
        }
    }
}

/// The display of the tokens is nothing more than displaying its
/// internal value. By implementing the Display trait, we
/// automatically get the ToString trait, allowing us to use the
/// to_string() method to convert an enum into a string.
impl<'a> Display for Tokens<'a> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let value = self.string();
        write!(f, "({})", value)
    }
}
